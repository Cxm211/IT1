WARN: Parsing crate `serde_derive`: can't find lib.rs with `cargo metadata`. The crate may be available only on a particular platform, so consider setting `fetch_all_dependencies` in your cbindgen configuration.
WARN: Skip syn::PLACEHOLDER - (Unsupported call expression. Expr::Call { attrs: [], func: Expr::Path { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Expr), arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident(Path), arguments: PathArguments::None }] } }, paren_token: Paren, args: [Expr::Struct { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ExprPath), arguments: PathArguments::None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Member::Named(Ident(attrs)), colon_token: Some(Colon), expr: Expr::Call { attrs: [], func: Expr::Path { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident(new), arguments: PathArguments::None }] } }, paren_token: Paren, args: [] } }, Comma, FieldValue { attrs: [], member: Member::Named(Ident(qself)), colon_token: Some(Colon), expr: Expr::Path { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(None), arguments: PathArguments::None }] } } }, Comma, FieldValue { attrs: [], member: Member::Named(Ident(path)), colon_token: Some(Colon), expr: Expr::Struct { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Path), arguments: PathArguments::None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Member::Named(Ident(leading_colon)), colon_token: Some(Colon), expr: Expr::Path { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(None), arguments: PathArguments::None }] } } }, Comma, FieldValue { attrs: [], member: Member::Named(Ident(segments)), colon_token: Some(Colon), expr: Expr::Call { attrs: [], func: Expr::Path { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Punctuated), arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident(new), arguments: PathArguments::None }] } }, paren_token: Paren, args: [] } }, Comma], dot2_token: None, rest: None } }, Comma], dot2_token: None, rest: None }] })
WARN: Skip syn::MIN - (not `pub`).