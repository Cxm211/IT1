/* automatically generated by rust-bindgen 0.71.1 */

#[macro_use]
extern crate objc;
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
extern crate block;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct FooWithBlock(pub id);
impl std::ops::Deref for FooWithBlock {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for FooWithBlock {}
impl FooWithBlock {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(FooWithBlock), alloc) })
    }
}
impl<ObjectType: 'static> IFooWithBlock<ObjectType> for FooWithBlock {}
pub trait IFooWithBlock<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn enumerateObjectsUsingBlock_(&self, block: _bindgen_ty_id_5)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsUsingBlock : block)
    }
}
pub type _bindgen_ty_id_5 = *const ::block::Block<(id, ::std::os::raw::c_int), ()>;