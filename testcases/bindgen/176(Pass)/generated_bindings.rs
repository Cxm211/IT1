/* automatically generated by rust-bindgen 0.71.1 */

#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Thing {
    pub method_ptr: __BindgenOpaqueArray<u64, 2usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Thing"][::std::mem::size_of::<Thing>() - 16usize];
    ["Alignment of Thing"][::std::mem::align_of::<Thing>() - 8usize];
    ["Offset of field: Thing::method_ptr"][::std::mem::offset_of!(Thing, method_ptr) - 0usize];
};
