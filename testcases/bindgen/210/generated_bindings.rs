/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const StyleTimingKeyword_Foo: StyleTimingKeyword = 0;
pub const StyleTimingKeyword_Bar: StyleTimingKeyword = 1;
pub type StyleTimingKeyword = ::std::os::raw::c_uchar;
pub const StyleStepPosition_Baz: StyleStepPosition = 0;
pub const StyleStepPosition_Bar: StyleStepPosition = 1;
pub type StyleStepPosition = ::std::os::raw::c_uchar;
#[repr(C)]
#[repr(align(1))]
pub struct StyleTimingFunction<Integer, Number> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Integer>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<Number>>,
    pub __bindgen_anon_1: __BindgenUnionField<StyleTimingFunction__bindgen_ty_1>,
    pub keyword: __BindgenUnionField<StyleTimingFunction_Keyword_Body>,
    pub cubic_bezier: __BindgenUnionField<StyleTimingFunction_CubicBezier_Body<Number>>,
    pub steps: __BindgenUnionField<StyleTimingFunction_Steps_Body<Integer>>,
    pub bindgen_union_field: [u8; 0usize],
}
pub const StyleTimingFunction_Tag_Keyword: StyleTimingFunction_Tag = 0;
pub const StyleTimingFunction_Tag_CubicBezier: StyleTimingFunction_Tag = 0;
pub const StyleTimingFunction_Tag_Steps: StyleTimingFunction_Tag = 0;
pub type StyleTimingFunction_Tag = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StyleTimingFunction_Keyword_Body {
    pub tag: StyleTimingFunction_Tag,
    pub _0: StyleTimingKeyword,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StyleTimingFunction_CubicBezier_Body<Number> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Number>>,
    pub tag: StyleTimingFunction_Tag,
    pub x1: Number,
    pub y1: Number,
    pub x2: Number,
    pub y2: Number,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StyleTimingFunction_Steps_Body<Integer> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Integer>>,
    pub tag: StyleTimingFunction_Tag,
    pub _0: Integer,
    pub _1: StyleStepPosition,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StyleTimingFunction__bindgen_ty_1 {
    pub tag: StyleTimingFunction_Tag,
}
#[repr(C)]
pub struct Foo {
    pub f: StyleTimingFunction<::std::os::raw::c_int, f32>,
}
#[test]
fn bindgen_test_layout_Foo() {
    const UNINIT: ::std::mem::MaybeUninit<Foo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Foo>(), 20usize, "Size of Foo");
    assert_eq!(::std::mem::align_of::<Foo>(), 4usize, "Alignment of Foo");
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        "Offset of field: Foo::f"
    );
}
#[test]
fn __bindgen_test_layout_StyleTimingFunction_open0_int_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<StyleTimingFunction<::std::os::raw::c_int, f32>>(),
        20usize,
        "Size of template specialization: StyleTimingFunction_open0_int_float_close0"
    );
    assert_eq!(
        ::std::mem::align_of::<StyleTimingFunction<::std::os::raw::c_int, f32>>(),
        4usize,
        "Align of template specialization: StyleTimingFunction_open0_int_float_close0"
    );
}
