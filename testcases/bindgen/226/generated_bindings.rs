/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_B {
    pub traits_type: _Traits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of C"][::std::mem::size_of::<C>() - 1usize];
    ["Alignment of C"][::std::mem::align_of::<C>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN1C5m_fn1E1AIciE"]
    pub fn C_m_fn1(this: *mut C, arg1: A);
}
impl C {
    #[inline]
    pub unsafe fn m_fn1(&mut self, arg1: A) {
        C_m_fn1(self, arg1)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Test {
    pub fChain: C,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Test"][::std::mem::size_of::<Test>() - 1usize];
    ["Alignment of Test"][::std::mem::align_of::<Test>() - 1usize];
    ["Offset of field: Test::fChain"][::std::mem::offset_of!(Test, fChain) - 0usize];
};
