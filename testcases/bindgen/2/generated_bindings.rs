/* automatically generated by rust-bindgen 0.71.1 */

use objc::{self, class, msg_send, sel, sel_impl};
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct X(pub id);
impl std::ops::Deref for X {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for X {}
impl X {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(X), alloc) })
    }
}
impl IX for X {}
pub trait IX: Sized + std::ops::Deref {
    unsafe fn p0(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, p0)
    }
}
impl X_ for X {}
pub trait X_: Sized + std::ops::Deref {
    unsafe fn p1(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, p1)
    }
}
impl X_ for X {}
pub trait X_: Sized + std::ops::Deref {
    unsafe fn p2(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, p2)
    }
}
