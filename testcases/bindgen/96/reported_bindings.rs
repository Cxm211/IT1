/* automatically generated by rust-bindgen */

#![feature(const_fn)]
pub use self::root::*;
unsafe impl Sync for JSClass {}
unsafe impl Sync for JSFunctionSpec {}
unsafe impl Sync for JSNativeWrapper {}
unsafe impl Sync for JSPropertySpec {}
unsafe impl Sync for JSTypedMethodJitInfo {}

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod JS {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Rooted<a> {
            pub b: a,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<a>>,
        }
    }
    #[test]
    fn __bindgen_test_layout_Rooted_instantiation_1() {
        assert_eq!(::std::mem::size_of::<root::JS::Rooted<::std::os::raw::c_int>>()
                   , 4usize , concat ! (
                   "Size of template specialization: " , stringify ! (
                   root::JS::Rooted<::std::os::raw::c_int> ) ));
        assert_eq!(::std::mem::align_of::<root::JS::Rooted<::std::os::raw::c_int>>()
                   , 4usize , concat ! (
                   "Alignment of template specialization: " , stringify ! (
                   root::JS::Rooted<::std::os::raw::c_int> ) ));
    }
    #[test]
    fn __bindgen_test_layout_Rooted_instantiation_2() {
        assert_eq!(::std::mem::size_of::<root::JS::Rooted<root::JS::AutoValueVector_Vec>>()
                   , 4usize , concat ! (
                   "Size of template specialization: " , stringify ! (
                   root::JS::Rooted<root::JS::AutoValueVector_Vec> ) ));
        assert_eq!(::std::mem::align_of::<root::JS::Rooted<root::JS::AutoValueVector_Vec>>()
                   , 4usize , concat ! (
                   "Alignment of template specialization: " , stringify ! (
                   root::JS::Rooted<root::JS::AutoValueVector_Vec> ) ));
    }
}