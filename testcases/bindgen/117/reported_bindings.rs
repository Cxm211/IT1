/* automatically generated by rust-bindgen */

pub const b: _bindgen_ty_1 = _bindgen_ty_1::b;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 { b = 0, }
pub type JS_d = ();
#[repr(C)]
pub struct JS_e {
    pub f: JS_d,
}
#[repr(C)]
pub struct JS_AutoIdVector {
    pub _base: JS_e,
}
#[test]
fn bindgen_test_layout_JS_AutoIdVector() {
    assert_eq!(::std::mem::size_of::<JS_AutoIdVector>() , 1usize , concat ! (
               "Size of: " , stringify ! ( JS_AutoIdVector ) ));
    assert_eq! (::std::mem::align_of::<JS_AutoIdVector>() , 1usize , concat !
                ( "Alignment of " , stringify ! ( JS_AutoIdVector ) ));
}
#[test]
fn __bindgen_test_layout_JS_e_instantiation_16() {
    assert_eq!(::std::mem::size_of::<JS_e>() , 1usize , concat ! (
               "Size of template specialization: " , stringify ! ( JS_e ) ));
    assert_eq!(::std::mem::align_of::<JS_e>() , 1usize , concat ! (
               "Alignment of template specialization: " , stringify ! ( JS_e )
               ));
}