/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RefPtr {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct B {
    pub d: *mut c,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of B"][::std::mem::size_of::<B>() - 8usize];
    ["Alignment of B"][::std::mem::align_of::<B>() - 8usize];
    ["Offset of field: B::d"][::std::mem::offset_of!(B, d) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e {
    pub _address: u8,
}
pub type e_a = b;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of e"][::std::mem::size_of::<e>() - 1usize];
    ["Alignment of e"][::std::mem::align_of::<e>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of f"][::std::mem::size_of::<f>() - 1usize];
    ["Alignment of f"][::std::mem::align_of::<f>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZN1fC1E1B"]
    pub fn f_f(this: *mut f, arg1: B);
}
impl f {
    #[inline]
    pub unsafe fn new(arg1: B) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        f_f(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct i {
    pub h: RefPtr,
}
pub type i_g<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct l {
    pub j: i,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of l"][::std::mem::size_of::<l>() - 1usize];
    ["Alignment of l"][::std::mem::align_of::<l>() - 1usize];
    ["Offset of field: l::j"][::std::mem::offset_of!(l, j) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct c {
    pub k: l,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of c"][::std::mem::size_of::<c>() - 1usize];
    ["Alignment of c"][::std::mem::align_of::<c>() - 1usize];
    ["Offset of field: c::k"][::std::mem::offset_of!(c, k) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct b {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of b"][::std::mem::size_of::<b>() - 1usize];
    ["Alignment of b"][::std::mem::align_of::<b>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__Z25Servo_Element_GetSnapshotv"]
    pub fn Servo_Element_GetSnapshot() -> e;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: i_open0_int_close0"][::std::mem::size_of::<i>() - 1usize];
    ["Align of template specialization: i_open0_int_close0"][::std::mem::align_of::<i>() - 1usize];
};
