/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __tree_node {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct s {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct y {
        pub _address: u8,
    }
    pub mod octave {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct stream {
            pub v: root::y,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of stream"][::core::mem::size_of::<stream>() - 1usize];
            ["Alignment of stream"][::core::mem::align_of::<stream>() - 1usize];
            ["Offset of field: stream::v"][::core::mem::offset_of!(stream, v) - 0usize];
        };
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: y_open0_s_open1___node_pointer_close1_close0"]
            [::core::mem::size_of::<root::y>() - 1usize];
        ["Align of template specialization: y_open0_s_open1___node_pointer_close1_close0"]
            [::core::mem::align_of::<root::y>() - 1usize];
    };
    pub type __node_pointer = root::__node_pointer;
    pub type __node_pointer = *mut root::__tree_node;
}
