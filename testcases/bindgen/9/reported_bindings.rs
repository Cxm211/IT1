/* automatically generated by rust-bindgen 0.57.0 */

extern crate libloading;
pub struct TestLib {
    __library: ::libloading::Library,
    pub TakesSymArgument: Result<
        unsafe extern "C" fn(sym: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
}
impl TestLib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Ok(Self::from_library(library))
    }
    pub unsafe fn from_library<L>(library: L) -> Self
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let TakesSymArgument =
            __library.get(b"TakesSymArgument\0").map(|sym| *sym);
        TestLib {
            __library,
            TakesSymArgument,
        }
    }
    pub unsafe fn TakesSymArgument(
        &self,
        sym: *mut ::std::os::raw::c_void,
    ) -> () {
        let sym = self
            .TakesSymArgument
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(sym)
    }
}