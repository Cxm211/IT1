/* automatically generated by rust-bindgen 0.65.1 */

impl AnotherName {
    pub const OptionA: AnotherName = AnotherName(0);
}
impl AnotherName {
    pub const OptionB: AnotherName = AnotherName(1);
}
impl AnotherName {
    pub const OptionC: AnotherName = AnotherName(2);
}
impl ::std::ops::BitOr<AnotherName> for AnotherName {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        AnotherName(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for AnotherName {
    #[inline]
    fn bitor_assign(&mut self, rhs: AnotherName) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<AnotherName> for AnotherName {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        AnotherName(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for AnotherName {
    #[inline]
    fn bitand_assign(&mut self, rhs: AnotherName) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AnotherName(pub ::std::os::raw::c_uint);
