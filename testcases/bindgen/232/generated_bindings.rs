/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TestType {
    pub self_: *mut TestType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TestType"][::std::mem::size_of::<TestType>() - 8usize];
    ["Alignment of TestType"][::std::mem::align_of::<TestType>() - 8usize];
    ["Offset of field: TestType::self_"][::std::mem::offset_of!(TestType, self_) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK8TestType7isvalidEv"]
    pub fn TestType_isvalid(this: *const TestType) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN8TestTypeC1Ev"]
    pub fn TestType_TestType(this: *mut TestType);
}
impl TestType {
    #[inline]
    pub unsafe fn isvalid(&self) -> bool {
        TestType_isvalid(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        TestType_TestType(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}

