/* automatically generated by rust-bindgen 0.71.1 */

#[macro_use]
extern crate objc;
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSImage(pub id);
impl std::ops::Deref for NSImage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSImage {}
impl NSImage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSImage), alloc) })
    }
}
impl INSImage for NSImage {}
pub trait INSImage: Sized + std::ops::Deref {}
impl NSImage_ for NSImage {}
pub trait NSImage_: Sized + std::ops::Deref {}
impl NSImage_ for NSImage {}
pub trait NSImage_: Sized + std::ops::Deref {
    unsafe fn foo(&self) -> *mut ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, foo)
    }
}
