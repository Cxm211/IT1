/* automatically generated by rust-bindgen */

#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MyEnum { ONE = 0, TWO = 1, THREE = 2, FOUR = 3, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TaggedPtr {
    pub _bitfield_1: u8,
    pub _bitfield_2: u64,
    pub __bindgen_align: [u64; 0usize],
}
#[test]
fn bindgen_test_layout_TaggedPtr() {
    assert_eq!(::std::mem::size_of::<TaggedPtr>() , 8usize , concat ! (
               "Size of: " , stringify ! ( TaggedPtr ) ));
    assert_eq! (::std::mem::align_of::<TaggedPtr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TaggedPtr ) ));
}
impl Clone for TaggedPtr {
    fn clone(&self) -> Self { *self }
}
impl TaggedPtr {
    #[inline]
    pub fn tag(&self) -> MyEnum {
        let mask = 3usize as u8;
        let unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_tag(&mut self, val: MyEnum) {
        let mask = 3usize as u8;
        let val = val as u32 as u8;
        let mut unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub const fn new_bitfield_1(tag: MyEnum) -> u8 {
        ({ 0 } | ((tag as u32 as u8) << 0usize) & (3usize as u8))
    }
    #[inline]
    pub fn ptr(&self) -> ::std::os::raw::c_long {
        let mask = 4611686018427387903usize as u64;
        let unit_field_val: u64 =
            unsafe { ::std::mem::transmute(self._bitfield_2) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u64) }
    }
    #[inline]
    pub fn set_ptr(&mut self, val: ::std::os::raw::c_long) {
        let mask = 4611686018427387903usize as u64;
        let val = val as u64 as u64;
        let mut unit_field_val: u64 =
            unsafe { ::std::mem::transmute(self._bitfield_2) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_2 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub const fn new_bitfield_2(ptr: ::std::os::raw::c_long) -> u64 {
        ({ 0 } |
             ((ptr as u64 as u64) << 0usize) &
                 (4611686018427387903usize as u64))
    }
}