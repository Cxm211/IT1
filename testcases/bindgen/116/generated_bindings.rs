/* automatically generated by rust-bindgen 0.71.1 */

unsafe extern "C" {
    #[link_name = "\u{1}g"]
    pub static f_g: ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}g"]
    pub static h_g: ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct i {
    pub j: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of i"][::std::mem::size_of::<i>() - 4usize];
    ["Alignment of i"][::std::mem::align_of::<i>() - 4usize];
    ["Offset of field: i::j"][::std::mem::offset_of!(i, j) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m<k, l> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<k>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<l>>,
    pub _base: l,
    pub o: k,
    pub p: ::std::os::raw::c_long,
    pub q: ::std::os::raw::c_long,
    pub r: ::std::os::raw::c_long,
    pub s: u8,
    pub t: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m_n {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct G<k> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<k>>,
    pub ag: G_af,
    pub ah: k,
}
pub type G_af = *mut ::std::os::raw::c_void;
pub type aj<k> = G<k>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u<k> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<k>>,
    pub a: *mut u<k>,
    pub am: *mut u<k>,
    pub an: aj<k>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I {
    pub ap: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of I"][::std::mem::size_of::<I>() - 8usize];
    ["Alignment of I"][::std::mem::align_of::<I>() - 8usize];
    ["Offset of field: I::ap"][::std::mem::offset_of!(I, ap) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JS_v {
    pub ar: m<I, i>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JS_v"][::std::mem::size_of::<JS_v>() - 112usize];
    ["Alignment of JS_v"][::std::mem::align_of::<JS_v>() - 8usize];
    ["Offset of field: JS_v::ar"][::std::mem::offset_of!(JS_v, ar) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JS_AutoIdVector {
    pub _base: u<JS_v>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JS_AutoIdVector"][::std::mem::size_of::<JS_AutoIdVector>() - 136usize];
    ["Alignment of JS_AutoIdVector"][::std::mem::align_of::<JS_AutoIdVector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: m_open0_I_i_close0"]
        [::std::mem::size_of::<m<I, i>>() - 112usize];
    ["Align of template specialization: m_open0_I_i_close0"]
        [::std::mem::align_of::<m<I, i>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: u_open0_JS_v_close0"]
        [::std::mem::size_of::<u<JS_v>>() - 136usize];
    ["Align of template specialization: u_open0_JS_v_close0"]
        [::std::mem::align_of::<u<JS_v>>() - 8usize];
};
